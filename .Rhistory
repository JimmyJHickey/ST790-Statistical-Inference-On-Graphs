knitr::opts_chunk$set(echo = TRUE)
(igraph)
(igraph)
library(igraph)
p <- 0.4
q <- 0.6
library(igraph)
p <- 0.4
q <- 0.6
n <- 1000
m <- 10
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
A
max(degree(A))
sum(count_triangles(A))/3
x = sqrt( 2 * log(n) )
k = n*p + x * sqrt((n*p * (1-p)))
delta = max(degree(A))
x = sqrt( 2 * log(n) )
k = n*p + x * sqrt((n*p * (1-p)))
?norm
pnorm?
?pnorm
?pgumbel
gubmel
?pgumbel
install.packages("evd")
knitr::opts_chunk$set(echo = TRUE)
library(evd)
dgumbel(-1:2, -1, 0.5)
dgumbel(-1, -1, 0.5)
dgumbel(2, -1, 0.5)
pgumbel(2, -1, 0.5)
pgumbel(-2, -1, 0.5)
k
pgumbel(-2, 0, 1)
pgumbel(k, 0, 1)
dgumbel(k, 0, 1)
dgumbel(delta, 0, 1)
delta
dgumbel(delta, 1,0)
k
delta
m <- 100
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
library(igraph)
p <- 0.4
q <- 0.6
n <- 1000
m <- 100
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
A
k
delta = max(degree(A))
x = sqrt( 2 * log(n) )
k = n*p + x * sqrt((n*p * (1-p)))
k
delta
delta = max(degree(A))
delta
max(degree(A))
m <- 10
p <- 0.4
q <- 0.6
n <- 1000
m <- 10
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
delta = max(degree(A))
delta
m <- 100
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
delta = max(degree(A))
delta
x = sqrt( 2 * log(n) )
k = n*p + x * sqrt((n*p * (1-p)))
m <- 50
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
delta = max(degree(A))
delta
sum(count_triangles(A))/3
m <- 100
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
delta = max(degree(A))
delta
sum(count_triangles(A))/3
m <- 10
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
delta = max(degree(A))
delta
sum(count_triangles(A))/3
x
dgumbel(x, 0 , 1)
dgumbel(k, 0 , 1)
pgumbel(delta, 0 , 1) - pgumbel(k, 0 , 1)
delta
tau = sum(count_triangles(A))/3
choose(4,3)
tau_test = (tau - choose(n, 3)*p^3) / ( (n-2)*p^2*sqrt(choose(n,2) *p * (1-p)) )
tau_test
A
?sbm.game
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
p <- 0.4
q <- 0.6
n <- 1000
m <- 10
B <- matrix(c(p,p,p,q),nrow = 2)
A <- sbm.game(n = n, pref.matrix = B, block.sizes = c(n-m,m))
?sbm.game
ecount(A)
num_edges = ecount(A)
phat =  num_edges / choose(n, 2)
phat
x = sqrt( 2 * log(n) )
k = n*phat + x * sqrt((n*phat * (1-phat)))
library(evd)
pgumbel(delta, 0 , 1) - pgumbel(k, 0 , 1)
tau = sum(count_triangles(A))/3
install.packages("subspace")
library(subspace)
library("subspace")
library("subspace")
library("subspace")
install.packages("rJava")
library("subspace")
library("subspace")
library("rJava")
library("rJava")
library("subspace")
